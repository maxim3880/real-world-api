package data

import (
	"database/sql"
	"fmt"

	"github.com/jmoiron/sqlx"
	//Register postgres driver
	_ "github.com/lib/pq"
)

const schema = `
	CREATE TABLE IF NOT EXISTS users (
		id integer UNIQUE generated by default as identity,
		name text not null, 
		email text not null,
		password text not null,
		bio text DEFAULT '',
		image text DEFAULT ''
	);
	CREATE TABLE IF NOT EXISTS tags (
		id integer generated by default as identity,
		name text
	);
`

const connStr = "user=postgres dbname=postgres password=maxim3880 sslmode=disable"

//CreatePostgresDbStore represent correct create db store
func CreatePostgresDbStore() Store {
	store := PostgresDbStore{}
	if store.ExecMigration() {
		return &store
	}
	return nil
}

//PostgresDbStore represent main application data store
type PostgresDbStore struct {
}

//ExecMigration create all tables
func (s *PostgresDbStore) ExecMigration() (result bool) {
	db, err := sqlx.Connect("postgres", connStr)
	if err != nil {
		fmt.Println(err)
		return false
	}
	defer db.Close()
	db.MustExec(schema)
	return true
}

//Select represent select records from database
func (s *PostgresDbStore) Select(dest interface{}, query string, args ...interface{}) error {
	db, err := sqlx.Connect("postgres", connStr)
	if err != nil {
		return err
	}
	defer db.Close()
	return db.Select(dest, query, args...)
}

//Get represent return one record from database
func (s *PostgresDbStore) Get(dest interface{}, query string, args ...interface{}) error {
	db, err := sqlx.Connect("postgres", connStr)
	if err != nil {
		return err
	}
	defer db.Close()
	return db.Get(dest, query, args...)
}

//Insert represent insert dbquery with returning inserted id value
func (s *PostgresDbStore) Insert(query string, args ...interface{}) (id int) {
	query = query + " RETURNING id"
	db, err := sqlx.Connect("postgres", connStr)
	if err != nil {
		return
	}
	defer db.Close()
	db.QueryRowx(query, args...).Scan(&id)
	return id
}

//Update represent update dbquery
func (s *PostgresDbStore) Update(query string, args map[string]interface{}) (sql.Result, error) {
	db, err := sqlx.Connect("postgres", connStr)
	if err != nil {
		return nil, err
	}
	defer db.Close()
	return db.NamedExec(query, args)
}
