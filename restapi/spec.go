// Package restapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4yQMWvDMBCF/4p47egmTprJW6YSOrQUQodSgrAutsCWxOlcmgT99yKZ0CEdOtnS6X28",
	"+y5o/Ri8IycRzSVVsO7o0VwgVgZCgzfSgz1rsd4pf1T5qN49D0ZtX3eo8EUcrXdosFrUixqpgg/kdLBo",
	"8FiuKgQtfeZjOUXi8teR5I+h2LINMiOeSKKSnlQ7MZOT4aQG33VkHqxTOYpC51JnZ+bEviArMMXgXaSC",
	"X9f1Lf7lGRVi29Oo8/Ce6YgGd8tfB8t5GkvPw5WIlCps6tUtce/0JL1neyaTV9+s1389ou9ArZBRxOz5",
	"3yU6csS2PZTUYfSGBqTcJU7jqPk073+VdRUkuotoPpC9KO2M2k7SkxPbFm34TCmlnwAAAP//hCk+mPkB",
	"AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
