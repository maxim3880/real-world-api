// Package restapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package restapi

import (
	externalRef0 "github.com/gofiber/fiber/v2"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get current user
	// (GET /users)
	GetUsers(ctx *externalRef0.Ctx) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx *externalRef0.Ctx) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

type FiberRouter interface {
	Use(args ...interface{}) externalRef0.Router

	Get(path string, handlers ...externalRef0.Handler) externalRef0.Router
	Head(path string, handlers ...externalRef0.Handler) externalRef0.Router
	Post(path string, handlers ...externalRef0.Handler) externalRef0.Router
	Put(path string, handlers ...externalRef0.Handler) externalRef0.Router
	Delete(path string, handlers ...externalRef0.Handler) externalRef0.Router
	Connect(path string, handlers ...externalRef0.Handler) externalRef0.Router
	Options(path string, handlers ...externalRef0.Handler) externalRef0.Router
	Trace(path string, handlers ...externalRef0.Handler) externalRef0.Router
	Patch(path string, handlers ...externalRef0.Handler) externalRef0.Router

	Add(method, path string, handlers ...externalRef0.Handler) externalRef0.Router
	Static(prefix, root string, config ...externalRef0.Static) externalRef0.Router
	All(path string, handlers ...externalRef0.Handler) externalRef0.Router

	Group(prefix string, handlers ...externalRef0.Handler) externalRef0.Router

	Mount(prefix string, fiber *externalRef0.App) externalRef0.Router
}

// RegisterHandlers adds each server route to the FiberRouter.
func RegisterHandlers(router FiberRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router FiberRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.Add("GET", "/users", func(ctx *externalRef0.Ctx) error {
		return wrapper.GetUsers(ctx)
	})

}
